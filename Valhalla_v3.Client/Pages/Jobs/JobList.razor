 @page "/jobs"
@using Valhalla_v3.Shared.ToDo
@rendermode InteractiveAuto
@inject NavigationManager navigation
@inject HttpClient Http

<PageTitle>Zadania</PageTitle>

<div class="container-fluid text-color-black">
    <div class="row">
        <div class="col-md-4 mb-4">
            <label for="formGroupExampleInput" class="form-label text-white">Projekt</label>
            <select class="form-select" id="formGroupExampleInput" aria-label="Default select example" @bind="projectsId" @bind:after="() =>SetProject()">
                @if (projectsId != 0)
                {
                    <option selected value="@projects.Select(x => x.Id).First(x => x == projectsId)">
                        @projects.Where(x => x.Id == projectsId).Select(x => x.Name).First()
                    </option>
                }
                else
                {
                }
                    <option value="0">Wybierz projekt</option>
                @foreach (var project in projects.Where(x => x.Id != projectsId))
                {
                    <option value="@project.Id">@project.Name</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary" @onclick=OpenTextModal>Dodaj projekt</button>
        </div>
    </div>
    <div class="row text-white">
        <div class="col-md-6">
            <h3>Po terminie</h3>
            <div ondragover="event.preventDefault()" class="rounded border">
                @foreach (var item in _items.Where(x => x.Term < DateTime.Now.Date))
                {
                    <div draggable="true" @ondragstart="e => DragStartHandler(e, item)">
                        @item.Name
                    </div>
                }
            </div>
        </div>
        <div class="col-md-6">
            <h3>Dzisiaj</h3>

            <div ondragover="event.preventDefault()" class="rounded border">
                @foreach (var item in _items.Where(x => x.Term == DateTime.Now.Date))
                {
                    <div draggable="true" @ondragstart="e => DragStartHandler(e, item)">
                        @item.Name
                    </div>
                }
            </div>
        </div>

    </div>
</div>
<div class="fixed-buttons">
    <button class="btn btn-success" @onclick="()=>OpemModal(0)">Dodaj nowy</button>
</div>
@* Modal dodanie napraw *@
<div class="modal fade @(IsCreateOpen ? "show" : "")" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display:@(IsCreateOpen ? "block" : "none");">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-header-moje">
                <h5 class="modal-title" id="exampleModalLabel">Zadanie</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body modal-body-moje">
                <JobAddModal OnFormSubmit="Create" Id="_id" />
            </div>
        </div>
    </div>
</div>

<Valhalla_v3.Client.Components.TextModal Question="Podaj nazwę projektu" isChoiceOpen="@IsTextOpen" SubmitChoice="CreateProjekt"/>

<script>
    let dragged = null;
    const source = document.getElementById("draggable");
source.addEventListener("dragstart", (event) => {
  // store a ref. on the dragged elem
  dragged = event.target;
});

const target = document.getElementById("drop-target");
target.addEventListener("dragover", (event) => {
  // prevent default to allow drop
  event.preventDefault();
});

target.addEventListener("drop", (event) => {
  // prevent default action (open as link for some elements)
  event.preventDefault();
  // move dragged element to the selected drop target
  if (event.target.className === "dropzone") {
    dragged.parentNode.removeChild(dragged);
    event.target.appendChild(dragged);
  }
});
</script>